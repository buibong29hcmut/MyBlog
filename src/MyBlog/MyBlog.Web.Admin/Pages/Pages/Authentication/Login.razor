@page "/"
@page "/pages/authentication/login"
@using MyBlog.Web.Admin.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using MyBlog.Web.Admin.Shared
@namespace MyBlog.Web.Admin.Pages.Applications.Pages.Authentication
@inject WebAuthenticateService auth
@inject NavigationManager navigate
@inject ProtectedLocalStorage _protectedLocalStorage
@layout LoginLayout


<AuthorizeView Context="Account">
    <NotAuthorized>
<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/pages/authentication/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@UserName"  Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="/pages/authentication/forgot-password">Forgot pwd?</MudLink>
</div>


        <MudButton Variant="Variant.Filled" OnClick="TryLogin" Color="Color.Primary" Link="/personal/dashboard" Size="Size.Large" FullWidth="true">Sign In</MudButton>
    </NotAuthorized>
    <Authorizing>
        Authorizing in process...
    </Authorizing>
</AuthorizeView>

@code {
    string UserName { get; set; } 
    string Password { get; set; } 
    LoginFormModel model = new();
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task TryLogin()
    {   model.UserName=UserName;
        model.Password = Password;
        await auth.LoginAsync(model);
        navigate.NavigateTo("/personal/dashboard");
    }
    protected override async void OnInitialized()
    {
       var user=await  auth.GetAuthenticationStateAsync();
       if(user.User==null){
            navigate.NavigateTo("/pages/authentication/login");
       }
      
  
    }

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
